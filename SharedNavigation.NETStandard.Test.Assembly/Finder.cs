using System;
using System.Threading.Tasks;

namespace SharedNavigation.NETStandard.Test.Assembly
{
    public class FinderViewModel : INavigationViewModel
    {
        [InjectNavigation]
        public INavigationCommand<SimpleViewModel> PushCommand { get; set; } = new NavigationCommand<SimpleViewModel>();

        public void RestoreState(byte[] state)
        {
            throw new NotImplementedException();
        }

        public byte[] SaveState()
        {
            throw new NotImplementedException();
        }
    }

    #region For isNavigationView
    public interface IFinderView1 { }

    public class FinderView2 { }

    public class FinderView3 : IFinderView1 { }

    public class FinderView4 : IFinderView1
    {
        public void Method() { }
    }

    public class FinderView5 : INavigationView<SimpleViewModel>
    {
        public void RegisterNavigationByAutoGenerated(SimpleViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public interface IExtendNavigationView : INavigationView<FinderViewModel> { }

    public class FinderView6 : IExtendNavigationView
    {
        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView7 : FinderView6 { }
    #endregion

    #region For findNavigateMethods
    public class FinderView20 : INavigationView<FinderViewModel>
    {
        public Task PushAsync(FinderViewModel finderViewModel)
        {
            return Task.CompletedTask;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView21 : INavigationView<FinderViewModel>
    {
        [Navigate(nameof(FinderViewModel.PushCommand))]
        public Task PushAsync()
        {
            return Task.CompletedTask;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView22 : INavigationView<FinderViewModel>
    {
        [Navigate(nameof(FinderViewModel.PushCommand))]
        public Task PushAsync(FinderViewModel viewModel1, FinderViewModel viewModel2)
        {
            return Task.CompletedTask;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView23 : INavigationView<FinderViewModel>
    {
        [Navigate(nameof(FinderViewModel.PushCommand))]
        public bool PushAsync(FinderViewModel viewModel)
        {
            return false;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView24 : INavigationView<FinderViewModel>
    {
        [Navigate(nameof(FinderViewModel.PushCommand))]
        public Task<bool> PushAsync(FinderViewModel viewModel)
        {
            return Task.FromResult(false);
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView25 : INavigationView<FinderViewModel>
    {
        [Navigate(nameof(FinderViewModel.PushCommand))]
        public Task PushAsync(FinderViewModel viewModel)
        {
            return Task.CompletedTask;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }
    #endregion

    #region For findCanNavigateMethods
    public class FinderView40 : INavigationView<FinderViewModel>
    {
        public bool CanPush(FinderViewModel finderViewModel)
        {
            return false;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView41 : INavigationView<FinderViewModel>
    {
        [CanNavigate(nameof(FinderViewModel.PushCommand))]
        public bool CanPush()
        {
            return false;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView42 : INavigationView<FinderViewModel>
    {
        [CanNavigate(nameof(FinderViewModel.PushCommand))]
        public bool CanPush(FinderViewModel viewModel1, FinderViewModel viewModel2)
        {
            return false;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView43 : INavigationView<FinderViewModel>
    {
        [CanNavigate(nameof(FinderViewModel.PushCommand))]
        public string CanPush(FinderViewModel viewModel)
        {
            return string.Empty;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }

    public class FinderView44 : INavigationView<FinderViewModel>
    {
        [CanNavigate(nameof(FinderViewModel.PushCommand))]
        public bool CanPush(FinderViewModel viewModel)
        {
            return false;
        }

        public void RegisterNavigationByAutoGenerated(FinderViewModel viewModel, INavigationAction defaultNavigationAction)
        {
            throw new NotImplementedException();
        }
    }
    #endregion
}
